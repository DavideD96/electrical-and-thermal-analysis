function pca_thermal004_vs_detection(filename,fileres,start_end, varargin)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Date: 2023-11-29 Last modification: 07/04/24
%
%Author: Davide Decastri
%perform pca analysis using detected events (but excluding multiple frames
%related to the same event), or all the frames together.
%
% filename: name of the Thermal file
% fileres: name of the file containing electric measurements
% start_end: start frame and end frame (e.g. [30,1200])
% varargin: 
%   'N_significant_PC' number of PCs to plot
%   'add_electric_dat' plot time evolution of PCs and conductance together
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

select_point = 0;
nrighe = 3;
ncolonne = 4;
clustering = false;
N_significant_PC = 5;
use_electr = false;
smooth = false;

num = size(varargin,2);

for k = 1:2:num
    if prod(varargin{k}=='kmean_clustering')
        clustering = varargin{k+1};
    elseif prod(varargin{k}=='N_significant_PC')
        N_significant_PC = varargin{k+1};
    elseif prod(varargin{k}=='add_electric_dat')
        use_electr = varargin{k+1};
    elseif prod(varargin{k}=='smoothing_before')
        smooth = varargin{k+1};
    elseif prod(varargin{k}=='select_STTCpoint')
        select_point = varargin{k+1};

    end
end

data = load(filename,'-mat');
data = cell2mat(struct2cell(data));

if use_electr == true
    res = load(fileres);
    res = cell2mat(struct2cell(res));
end
%res = res(delay:end,:);

if start_end == 0
    nframes = size(data,3);
    starting_frame = 1;
else
    nframes = start_end(2)-start_end(1);
    starting_frame = start_end(1);
end

[rows,col] = size(data,1,2);
data_ = zeros(nframes,rows*col);

%data_: nxp matrix. n sono le osservazioni (frames), p i pixel.
for i = 0:nframes-1
    data_(i+1,:) = reshape(data(:,:,starting_frame+i),[1,rows*col]); 
end
% nframes
% size(data_)

%per ricostruire data:
%data = reshape(data_',[rows,col,nframes]); %da testare

clear data

%coeff sono i coefficienti delle componenti principali. Ogni colonna
%rappresenta una componente principale nella base delle osservabili fisiche
%originarie il numero massimo di coefficienti è pari al numero di pixel

%di default pca centra i dati, per cui i gradi di libertà massimi sono
%n-1, non n. Puoi anche impostare 'Centered',false
[coeff,scores,latent,tsquared,explained,mu1] = pca(data_);
    

%%%%%%%%%%%%%%%%%%%%%%%%%%%% explained %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
pcaSignificance = explained;

weigths = figure;
plot(linspace(1,20,20), pcaSignificance(1:20));
xlabel('pca component');
ylabel('variance %');
grid on;
set(gca, 'XTick', 1:20)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%% cumulative explained %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
pcaCSignificance = cumsum(pcaSignificance(1:50));
plot(linspace(1,50,50), pcaCSignificance);
xlabel('n° of pca components');
ylabel('explained variance %');
grid on;
set(gca, 'XTick', 1:50)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% %plot eigenvalues of covariance matrix
% figure
% plot(linspace(1,10,10), latent(1:10));
% xlabel('pca component');
% ylabel('latent');
% set(gca, 'XTick', 1:10)


%colormap(cm)
figure
for k = 1:ncolonne*nrighe
    subplot(nrighe,ncolonne,k);
    hold on;
    pc = reshape(coeff(:,k),[rows,col]);
    title(append('PC',num2str(k)));
    imagesc(flip(pc,1));
    xlim([1,col]);
    ylim([1,rows]);
    axis off
    colorbar
    hold off;
end

load('matriceEventi.mat','matriceEventi');

f = figure
pc = reshape(coeff(:,1),[rows,col]);
imagesc(flip(pc,1));
imagesc(pc)

hold on
colormap('winter')

eventiBoth_cold_hot = [matriceEventi(:,2);matriceEventi(:,3)];
[C,~,ix] = unique(eventiBoth_cold_hot); %C coordinate senza ripetizioni
Cn = accumarray(ix,1); %numero di volte che appare ogni coordinata (stesso ordine di C)

%esempio: se ho eventiBoth_cold_hot = [210;0;0;210;324;0;210]
%allora: C = [0;210;324], Cn = [3;3;1]

for k = 1:size(C,1)
    if C(k,1) ~= 0
        y = ceil(C(k,1)/rows);  
        x = C(k,1) - rows*(y-1);
        %plot(y,x,'w.', 'MarkerSize', 1.1*Cn(k,1));
        text(y-0.4,x, num2str(Cn(k,1)), 'FontSize', 10, 'Color', 'k');
        %plot(y-0.5,x+0.5,'Marker',num2str(Cn(k,1)),'MarkerSize',5,'Color','k');
    end
end

f.Position = [100,100,400,900];
colorbar

axis equal
hold off

end