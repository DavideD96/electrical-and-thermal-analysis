function engram2El_writing(filename,folders,comparison, varargin)

%help!
%
% varargin:                                                                
%   'el_data' = add electric data from 'experiment' folder
%               you have to specify the name of the folder where el data
%               are placed: e.g. {'batch4'}. The you'll be asked to
%               indicate the same point on the el data and the thermal
%               history, in order to match (syncronize) the plots.
%

%filename: togli anche il 00x

%comparison = 1; %last pulse and reading

num = size(varargin,2);
el_dat = false;

for k = 1:2:num
    if prod(varargin{k}=='el_data')
        el_dat = true;
        name = varargin{k+1};
    end
end


%Ttot = exper(1)*exper(4)*exper(5); %period*npulses*nrepetition

f_in = folders{1};
f_fin = folders{end};

in = str2double(f_in);
fin = str2double(f_fin);

history = [];

load('ThermoColorMap2.mat');
colormap(cm)

if comparison == 1
    hist_ = load("history.mat");
    hist_ = hist_.history;
end


indfold = 1; %el data folders


for ii = 1:length(folders)

    
    if el_dat == 1
        cd(name{1})
        cd('1')
        cd(num2str(indfold))
        cd experiments
        M = dlmread('Data.txt');
        exper = [M(2,1),M(2,5),M(2,3),M(2,8),M(2,7),M(4,1)]; %period, Volt, Width, npulses, nmeas_x_pulse, n repetitions
        
        % a seconda di unipolari o bipolari l'intestazione Ã¨ diversa
        if all(M(:,2) == M(10,2))
            
            M = M(4:end,:);
        else
            M = M(5:end,:);
        end
    
        t_end = M(end,1);
        position = exper(5);
        M_ = [];
        while position <= size(M,1)
           M_ = [M_;M(position-exper(5)+1:position,:)];
           tM = linspace(1,10,10)'*0.05+M(position,1); %0.5 s senza impulso, riempiti con uno zero.
           M_ = [M_;[tM,zeros(10,7)]];
           position = position + 5; %5 misure per impulso
        end

    
        M_ = [M_(1,1)-0.05, 0,0,0,0,0,0,0;M_]
    
        figure;
        yyaxis left
        plot(M_(:,1),M_(:,2))
        xlim([M_(1,1),M_(end,1)])
        ylim([min(M_(:,2))-0.2,max(M_(:,2))+0.2])
        yyaxis right
        plot(M_(:,1),M_(:,3))%./M_(:,2))
        grid on
        indfold = indfold+1;   

        pause
        posizione_el = ginput(1);
        posizione_el = posizione_el(1);
        cd ..
        cd ..
        cd ..
        cd ..        
    end

    %3-6
    f = num2str(folders{ii});
    cd(f)


    cd termoFiles_mat\

    m36 = load("mtotalT.mat");
    m36 = m36.mtotalT;
    % 
    % start = load("start_apply.mat");
    % start = start.index;

    zer = '';
    for kk = 1:3-numel(num2str(folders{ii}))
        zer = [zer,'0'];
    end
    cd ..
    groove_coord = load([filename,'-',zer,num2str(folders{ii}),'_groove_coordinates.mat']);
    groove_coord = groove_coord.groove_coordinates;
    

    CAF = m36(groove_coord(2,2):groove_coord(3,2),groove_coord(1,1):groove_coord(2,1),:);

    %size(history)
    %size(max(mdiff1,[],2))
    history = reshape(max(CAF,[],2),[size(CAF,1),size(CAF,3),1]);

    %hist__ = ones(size(history,1),30).*hist_(:,ii);

    % minim = min(mdiff1,[],'all');
    % maxim = max(mdiff1,[],'all');
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    rescaling = 70;

    close all    
    rescaling_ = rescaling/1.5;

    fig_ = figure('Position',[50,50,1000,700]);

    ax1 = axes(fig_);
    %subplot(3,1,1)
    %surf(history36)
    if comparison == 1
        imagesc(history)
        title('select last pulse')
        pause
        lastpulse_position = ginput(1);

    end

    %tiledlayout(1,2)

    %nexttile
    imagesc(history)

    if el_dat == 1
           
        pause;
        posizione_term = ginput(1);
        posizione_term = posizione_term(1);
        close all;
    
    %%%%%%% 20 Hz vs 50 Hz: time 0s-12s-20s reale
    %%%%%%% corrisponde a time 0 - 12*20 - 20*20 in posizione_el
    %%%%%%% corrisponde a time (posizione_term - (posizione_el-el(1,1))*50/20) -
    %%%%%%% posizione_term - (posizione_term + (el(end,1)-posizione_el)*50/20)
        figure;
        yyaxis left
        plot(M_(:,1),M_(:,2),'LineWidth',1.)
        ylim([min(M_(:,2))-0.2,max(M_(:,2))+0.2])
        xlim([min(M_(1,1)),max(M_(end,1))])
        yyaxis right
        plot(M_(:,1),M_(:,3),'LineWidth',1.) %./M_(:,2))
        grid on

        savefig('electric_data')
        close all
        fig_ = figure('Position',[50,50,1000,700]);
        history = history(:,posizione_term-(posizione_el-M_(1,1))*50:posizione_term+(M_(end,1)-posizione_el)*50);
        imagesc(history)
        %[posizione_term-(posizione_el-M_(1,1))*2.5,posizione_term+(M_(end,1)-posizione_el)*2.5]
        %xlim([posizione_term-(posizione_el-M_(1,1))*50,posizione_term+(M_(end,1)-posizione_el)*50])
    end


    colormap(cm)
    colorbar
    ylabel('sample axis [pixel]')
    xlabel('frame')
    %clim([min_,max_])
    view([0 90])
    %nexttile
    %imagesc(hist__)
    %colormap(cm)    

    if comparison == 1
        lastPulse = history(:,round(lastpulse_position(1)));
        hist_ = hist_(:,ii);
        plot(lastPulse - hist_)
        
    end

    savefig(['train_history_f',folders{ii},'.fig'])
    saveas(fig_,['train_history_f',folders{ii},'.png'],'png')
    cd .. 
end

end