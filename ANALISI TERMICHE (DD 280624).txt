ANALISI TERMICHE (DD 15/07/24)

					A) export .mat, set parameters for analysis

1) place yourself on the directory containing all .CSV files. In the following this folder is called "esportazione".
2) run locate_CAF('name', 10) and select CAF area (top left and bottom right angles)
	'name' = name of the file, without the frame number at the end (e.g. 'campione1_5V_folder20_50Hz_')
	10 = number of frame to display image.
3) you COULD run DD_read_thermocamera_singleFrameDiff('name', frame,'name_CAF_coordinates.mat') to identify the frame 
	where electric stimulation starts. frame should be varied to allow the detection.
4) run store_mtotalT('name', Nframes, 'name_CAF_coordinates') where 'name_CAF_coordinates.mat' added the string 	'CAF_coordinates.mat' at the end of 'name'. Nframes is the number of frames in the video. This operation can 
	take several minutes (or hours for videos containing > 10.000 frames). The data collected in the ROI are now
	stored in a 3D .mat array located in the folder 'termoFiles_mat'.
   Alternatively, you can run store_mtotalT8core('name', Nframes, 'name_CAF_coordinates') to parallelize the operation
   and significantly reduce the time required for the conversion.
5) run set_parameters(delay,fin,'threshold+',0.5,'threshold-',-0.5,'sampl_freq',30,'frame_diff',3,'detect_met','ThreshNN') 
   (here I used standard parameters, as an example). Delay is the frame where electric stimulation starts. fin is the frame 
   where electric stimulation finishes. these parameter allow to avoid false events detection.
   This functions creates a folder inside "esportazione", named 'parameters' and creates a struct named
   'ThermalParameters' with fields:
	'soglia_max' = threshold to identify positive thermal events (should be > 0) (set with 'threshold+').
	'soglia_min' = threshold to identify negative thermal events (should be < 0) (set with 'threshold-').
 	'fr_diff' = frame difference that you are going to use to build the differential time series. (3 means
		4th-1st, 5th-2nd, â€¦) (set with 'frame_diff').
	'samplfr' = sampling frequency (set with 'sampl_freq').
	'Columns' = x dimension.
	'Rows'= y dimension.
	'detectMeth' = detection method (Always use 'ThreshNN').
   these parameters are going to be used in iterate running of your programs. You can run set_parameters() for 
   default parameters (see function help).
6) run store_mtotalDT(). The differential time series is stored in a 3D .mat array.
_______________________________________________________________________________________________________________________

					B) Thermal preprocessing and detection

1) run analisi_Nframes011_multiEvento008_NOpV(). You can produce a video by adding a pair-value argument
	at the end: analisi_Nframes011_multiEvento008_NOpV(starting_frame,'MakeVideo',1). This program perform detection.
_______________________________________________________________________________________________________________________

					C) build data for analysis and perform statisical analysis

1) run evento_max_temp_010_matriceEventi(0) to collapse all frames containing the same events. This function returns and 
	saves the object 'matriceEventi'.

Now you can choose a pixel to identify an active site. Its coordinates are x (row) and y (column).

2) run pca_thermal003('mtotalT.mat','Data.mat',[frame_start,frame_end],'N_significant_PC',12,'add_electric_dat',false,
   'smoothing_before',0,'remove_0contours',false,'select_STTCpoint',1,'select_on_PC_num',1) to choose a point store data
   regarding one single Active Site.

   Alternatively:
   run cerca_punti_simili_2centresByUsr003([x,y]). This function stores data for statistical analysis in a variable named:
   'group_x[x]_y[y].mat', where [x] and [y] are integers corresponding to x and y coordinates. 

   [BE CAREFUL: x = row, y = column. The conversion [x_ev,y_ev] -> pixel number is done in this way:
		
	y_ev = ceil(eventi(i,1)/Rows);
        x_ev = eventi(i,1) - Rows*(y_ev-1);

    where x_ev and y_ev are the coordinates of the detected event]

   Alternatively, you can run cerca_punti_simili_2centresByUsr003_8cores([x,y]) to parallelize the operation
   and significantly reduce the time.

ISI analysis:
3) run ISIpuntiSimili('group_x[x]_y[y].mat', 'full', 'nBin', 50) where the nameValue pair 'nBin', 50 allows to choose the
   number of bin in the histogram (in this case 50). If nBin is not specified, the program uses the Freedman-Diaconis rule.

Barabasi analysis:
4) run BarabasiPuntiSimili('group_x[x]_y[y].mat',deltaT), where deltaT is the time window (in [s]).

________________________________________________________________________________________________________________________

					D) Thermal characterization

1) run histo_thermal001 to plot an histogram of the temperature differences associated to Thermal events detected.

________________________________________________________________________________________________________________________

					E) Principal Component Analysis

1) move to the directory '\termoFiles_mat', i.e., where mtotalT and mtotalDT are stored.
2) run pca_thermal003('mtotalT.mat','Data.mat',[frame_start,frame_end],'N_significant_PC',12,'add_electric_dat',false,...
   ...'smoothing_before',0,'remove_0contours',false)
